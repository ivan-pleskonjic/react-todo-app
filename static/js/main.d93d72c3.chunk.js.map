{"version":3,"sources":["components/Card/Card.js","components/AddToDo/AddToDo.js","components/ToDo/ToDo.js","components/ToDoList/ToDoList.js","consts.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","title","children","AddToDo","state","name","handleNameChange","bind","handleAddClick","e","this","setState","target","value","type","onChange","placeholder","onClick","React","Component","ToDo","checked","isDone","handleToggleDoneClick","handleDeleteClick","id","ToDoList","todos","map","todo","key","INITAL_STATE","nextId","App","newId","slice","push","filter","el","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d93d72c3.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n  return (\n    <div className=\"card\">\n      <h1 className=\"title\">{props.title}</h1>\n      <div className=\"body\">\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport './AddToDo.css';\n\nexport class AddToDo extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: ''\n    }\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleAddClick = this.handleAddClick.bind(this);\n  }\n\n  handleNameChange(e) {\n    this.setState({name: e.target.value});\n  }\n\n  handleAddClick(e) {\n    this.props.handleAddClick(this.state.name)\n    this.setState({name: ''});\n  }\n\n  render() {\n    return (\n      <div className=\"add-todo\">\n        <input type=\"text\"\n          value={this.state.name}\n          onChange={this.handleNameChange}\n          placeholder=\"What are you planning ToDo?\"\n          className=\"input\"/>\n        <button className=\"btn\" onClick={this.handleAddClick}>Add</button>\n      </div>\n    );\n  }  \n}\n\nexport default AddToDo;","import React from 'react';\nimport './ToDo.css';\n\nexport class ToDo extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checked: this.props.isDone\n    };\n\n    this.handleToggleDoneClick = this.handleToggleDoneClick.bind(this);\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\n  }\n\n  handleToggleDoneClick () {\n    this.setState({checked: !this.state.checked})\n    this.props.handleToggleDoneClick(this.props.id);\n  }\n\n  handleDeleteClick() {\n    this.props.handleDeleteClick(this.props.id);\n  }\n\n  render() {\n    return (\n      <div className=\"todo\">\n        <label>\n          <input type=\"checkbox\" checked={this.state.checked} onChange={this.handleToggleDoneClick} className=\"check\" />\n          <span className=\"name\">{this.props.isDone ? (<strike>{this.props.name}</strike>) : this.props.name}</span>\n        </label>      \n        <span className=\"remove\" onClick={this.handleDeleteClick}>X</span>\n      </div>\n    );\n  }  \n}\n\nexport default ToDo;","import React from 'react';\nimport './ToDoList.css';\nimport ToDo from '../ToDo/ToDo';\n\nexport class ToDoList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleToggleDoneClick = this.handleToggleDoneClick.bind(this);\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\n  }\n\n  handleToggleDoneClick(id) {\n    this.props.handleToggleDoneClick(id);\n  }\n\n  handleDeleteClick(id) {\n    this.props.handleDeleteClick(id);\n  }\n\n  render() {\n    return (\n      <div className=\"list\">\n        {\n          this.props.todos.map((todo) => {\n            return (\n              <ToDo key={todo.id}\n                id={todo.id}\n                name={todo.name}\n                isDone={todo.isDone}\n                handleToggleDoneClick={this.handleToggleDoneClick}\n                handleDeleteClick={this.handleDeleteClick}\n              />\n            );\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default ToDoList;","const INITAL_STATE = {\n  nextId: 3,\n  todos: [{\n    id: 1,\n    name: 'First Todo',\n    isDone: false\n  }, {\n    id: 2,\n    name: 'Second Todo',\n    isDone: true\n  }]\n};\n\nexport default INITAL_STATE;","import React from 'react';\nimport './App.css';\nimport Card from './components/Card/Card';\nimport AddToDo from './components/AddToDo/AddToDo';\nimport ToDoList from './components/ToDoList/ToDoList';\nimport INITAL_STATE from './consts';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = INITAL_STATE;\n\n    this.handleAddClick = this.handleAddClick.bind(this);\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\n    this.handleToggleDoneClick = this.handleToggleDoneClick.bind(this);\n  }\n\n  handleAddClick(name) {\n    if (name === '') {\n      return;\n    }\n    const newId = this.state.nextId;\n    let todos = this.state.todos.slice();\n    todos.push({id: newId, name: name, isDone: false});\n    this.setState({\n        nextId: newId + 1,\n        todos: todos\n    });\n  }\n\n  handleDeleteClick(id) {\n    const todos = this.state.todos.filter((el) => el.id !== id);\n    this.setState({ todos: todos });\n  }\n\n  handleToggleDoneClick(id) {\n    const todos = this.state.todos.map((todo) => {\n      if(todo.id === id) {\n        todo.isDone = !todo.isDone\n      }\n      return todo;\n    })\n    this.setState({todos: todos});\n  }\n\n  render() {    \n    return (\n      <div className=\"app-container\">\n        <Card title=\"ToDo App\">\n          <AddToDo\n            handleAddClick={this.handleAddClick}\n          />\n          <ToDoList\n            todos={this.state.todos}\n            handleDeleteClick={this.handleDeleteClick}\n            handleToggleDoneClick={this.handleToggleDoneClick}\n          />\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}